// ============================
// File: server/routes-superadmin.ts
// Fully-wired Super Admin API (Express + Drizzle). Paste into your server and mount at /api/superadmin
// ============================

import { Router, type Request, type Response } from "express";
import { db } from "./db"; // your Drizzle instance
import { eq, desc } from "drizzle-orm";
import { schools } from "./db/schema/schools"; // adjust import paths
import { users } from "./db/schema/users";
import { subscriptionEvents } from "./db/schema/subscription_events";

// --- Auth helpers (adjust to your existing auth/session setup) ---
function requireAuth(req: Request, res: Response, next: Function) {
  if (!req.user) return res.status(401).json({ error: "Unauthorized" });
  next();
}
function requireRole(role: "SUPER_ADMIN") {
  return (req: Request, res: Response, next: Function) => {
    if (!req.user) return res.status(401).json({ error: "Unauthorized" });
    if (req.user.role !== role) return res.status(403).json({ error: "Forbidden" });
    next();
  };
}

export const superAdmin = Router();
superAdmin.use(requireAuth, requireRole("SUPER_ADMIN"));

// Health check
superAdmin.get("/health", (_req, res) => res.json({ ok: true }));

// List schools
superAdmin.get("/schools", async (_req, res) => {
  const rows = await db.select().from(schools).orderBy(desc(schools.createdAt));
  res.json(rows);
});

// Create school (TRIAL by default)
superAdmin.post("/schools", async (req, res) => {
  try {
    const { name, plan = "TRIAL" } = req.body ?? {};
    if (!name) return res.status(400).json({ error: "Missing name" });
    const [row] = await db.insert(schools).values({ name, plan }).returning();
    res.status(201).json(row);
  } catch (e: any) {
    res.status(500).json({ error: e?.message || "Failed to create school" });
  }
});

// Delete school (will cascade if FK onDelete:"cascade")
superAdmin.delete("/schools/:id", async (req, res) => {
  try {
    const id = req.params.id;
    await db.delete(schools).where(eq(schools.id, id));
    res.json({ ok: true });
  } catch (e: any) {
    res.status(500).json({ error: e?.message || "Failed to delete school" });
  }
});

// Subscription events (latest first)
superAdmin.get("/subscription-events", async (req, res) => {
  const limit = Math.min(Number(req.query.limit) || 50, 200);
  const rows = await db
    .select()
    .from(subscriptionEvents)
    .orderBy(desc(subscriptionEvents.createdAt))
    .limit(limit);
  res.json(rows);
});

// Impersonation: set a session field used by your auth middleware
superAdmin.post("/impersonate/:userId", async (req: Request, res: Response) => {
  const { userId } = req.params;
  const [u] = await db.select().from(users).where(eq(users.id, userId)).limit(1);
  if (!u) return res.status(404).json({ error: "User not found" });
  (req.session as any).impersonateUserId = userId; // your auth layer should respect this
  res.json({ ok: true, impersonating: userId });
});

superAdmin.post("/stop-impersonation", (req, res) => {
  (req.session as any).impersonateUserId = undefined;
  res.json({ ok: true });
});

// (Optional) Manual invite without SendGrid – returns token you can paste in browser
// Adjust to your schema (invites table or users.pendingInviteToken)
// superAdmin.post("/invite", async (req, res) => { /* ... */ });

// ============================
// File: server/index.ts (snippet)
// Mount the router (ensure this is below session + auth wiring)
// ============================

// import { superAdmin } from "./routes-superadmin";
// app.use("/api/superadmin", superAdmin);

// ============================
// File: app/routes/SuperAdmin.tsx (React/Vite/SPA)
// Works with the same UI polish system we used for Passes/My Class
// ============================

import React, { useEffect, useMemo, useState } from "react";
import { Plus, Trash2, Shield, Building2, Gauge, CreditCard, UserCircle } from "lucide-react";

const API = {
  schools: "/api/superadmin/schools",
  events: "/api/superadmin/subscription-events",
  createSchool: "/api/superadmin/schools",
  deleteSchool: (id: string) => `/api/superadmin/schools/${id}`,
  impersonate: (id: string) => `/api/superadmin/impersonate/${id}`,
  stopImpersonation: "/api/superadmin/stop-impersonation",
};

const THEME = { primary: "59 130 246" };

function Btn({ children, intent = "primary", onClick, type = "button", disabled = false }: any) {
  const map: Record<string, string> = {
    primary: `bg-[rgb(${THEME.primary})] text-white hover:opacity-90 shadow-sm`,
    secondary: `border border-gray-200 hover:bg-gray-50`,
    subtle: `hover:bg-gray-50`,
    destructive: `bg-red-600 text-white hover:bg-red-700`,
  };
  return (
    <button type={type} onClick={onClick} disabled={disabled} className={`inline-flex items-center gap-2 justify-center rounded-xl px-4 py-2 text-sm font-medium disabled:opacity-60 ${map[intent]}`}>{children}</button>
  );
}

function KPI({ icon: Icon, label, value }: any) {
  return (
    <div className="rounded-2xl border border-gray-200 bg-white p-4 shadow-sm flex items-center gap-3">
      <div className={`p-2 rounded-xl bg-[rgb(${THEME.primary})]/10 text-[rgb(${THEME.primary})]`}><Icon size={18} /></div>
      <div>
        <div className="text-xs text-gray-500">{label}</div>
        <div className="text-lg font-semibold tracking-tight">{value}</div>
      </div>
    </div>
  );
}

export default function SuperAdmin() {
  const [loading, setLoading] = useState(true);
  const [schools, setSchools] = useState<any[]>([]);
  const [events, setEvents] = useState<any[]>([]);
  const [name, setName] = useState("");
  const [creating, setCreating] = useState(false);

  async function load() {
    setLoading(true);
    const [s, e] = await Promise.all([
      fetch(API.schools).then((r) => r.json()),
      fetch(API.events).then((r) => r.json()),
    ]);
    setSchools(s);
    setEvents(e);
    setLoading(false);
  }
  useEffect(() => { load(); }, []);

  const kpis = useMemo(() => ({
    totalSchools: schools.length,
    trials: schools.filter((x) => x.plan === "TRIAL").length,
    activeSubs: schools.filter((x) => ["BASIC","SMALL","MEDIUM","LARGE","UNLIMITED"].includes(x.plan)).length,
    recentEvents: events.length,
  }), [schools, events]);

  async function createSchool() {
    if (!name) return;
    setCreating(true);
    const res = await fetch(API.createSchool, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ name }) });
    if (res.ok) { setName(""); await load(); }
    setCreating(false);
  }
  async function removeSchool(id: string) {
    if (!confirm("Delete this school and all related data?")) return;
    const res = await fetch(API.deleteSchool(id), { method: "DELETE" });
    if (res.ok) await load();
  }

  return (
    <div className="min-h-screen bg-white">
      <header className="sticky top-0 z-30 border-b border-gray-200 bg-white/80 backdrop-blur">
        <div className="mx-auto max-w-6xl px-4 h-16 flex items-center justify-between">
          <div className="font-semibold tracking-tight flex items-center gap-2"><Shield size={18}/> Super Admin</div>
          <div className="flex items-center gap-2">
            <Btn intent="secondary" onClick={load}>Refresh</Btn>
          </div>
        </div>
      </header>

      <main className="mx-auto max-w-6xl px-4 py-6">
        {/* KPIs */}
        <div className="grid grid-cols-1 sm:grid-cols-4 gap-3 mb-6">
          <KPI icon={Building2} label="Total Schools" value={String(kpis.totalSchools)} />
          <KPI icon={Gauge} label="Active Subs" value={String(kpis.activeSubs)} />
          <KPI icon={CreditCard} label="Trials" value={String(kpis.trials)} />
          <KPI icon={UserCircle} label="Recent Events" value={String(kpis.recentEvents)} />
        </div>

        {/* Create school */}
        <div className="rounded-2xl border border-gray-200 bg-white p-4 shadow-sm mb-6">
          <div className="flex items-end gap-2">
            <div className="flex-1">
              <label className="text-sm font-medium">New School Name</label>
              <input value={name} onChange={(e)=>setName(e.target.value)} placeholder="e.g., Saint Francis de Sales" className="w-full mt-1 rounded-xl border border-gray-300 px-3 py-2" />
            </div>
            <Btn onClick={createSchool} disabled={!name || creating}><Plus size={16}/> Create School</Btn>
          </div>
        </div>

        {/* Schools table */}
        <div className="rounded-2xl overflow-hidden border border-gray-200 shadow-sm mb-8">
          <div className="grid grid-cols-6 bg-gray-50">
            {['Name','Plan','ID','Created','Actions',''].map((h) => (
              <div key={h} className="py-3 px-4 text-xs font-semibold uppercase tracking-wide">{h}</div>
            ))}
          </div>
          {loading ? (
            <div className="p-6 text-center text-gray-500">Loading…</div>
          ) : schools.length === 0 ? (
            <div className="p-6 text-center text-gray-500">No schools yet.</div>
          ) : (
            schools.map((s: any, idx: number) => (
              <div key={s.id} className={`grid grid-cols-6 border-t ${idx%2===0?'bg-white':'bg-gray-50/40'}`}>
                <div className="py-3 px-4 font-medium">{s.name}</div>
                <div className="py-3 px-4">{s.plan}</div>
                <div className="py-3 px-4 text-xs">{s.id}</div>
                <div className="py-3 px-4 text-sm">{new Date(s.createdAt || s.created_at).toLocaleString()}</div>
                <div className="py-3 px-4 flex items-center gap-2">
                  {/* Replace with real pickers: impersonate a user from this school if desired */}
                  <Btn intent="destructive" onClick={() => removeSchool(s.id)}><Trash2 size={16}/> Delete</Btn>
                </div>
                <div className="py-3 px-4" />
              </div>
            ))
          )}
        </div>

        {/* Subscription events */}
        <div className="rounded-2xl overflow-hidden border border-gray-200 shadow-sm">
          <div className="grid grid-cols-4 bg-gray-50">
            {['Time','Type','School','Details'].map((h) => (
              <div key={h} className="py-3 px-4 text-xs font-semibold uppercase tracking-wide">{h}</div>
            ))}
          </div>
          {events.length === 0 ? (
            <div className="p-6 text-center text-gray-500">No subscription events yet.</div>
          ) : (
            events.map((ev: any, idx: number) => (
              <div key={ev.id} className={`grid grid-cols-4 border-t ${idx%2===0?'bg-white':'bg-gray-50/40'}`}>
                <div className="py-3 px-4 text-sm">{new Date(ev.createdAt || ev.created_at).toLocaleString()}</div>
                <div className="py-3 px-4 text-sm">{ev.type}</div>
                <div className="py-3 px-4 text-xs">{ev.schoolId || ev.school_id}</div>
                <div className="py-3 px-4 text-sm truncate">{ev.details || ev.payload || '—'}</div>
              </div>
            ))
          )}
        </div>
      </main>
    </div>
  );
}

// ============================
// File: server/auth-middleware.ts (reference – how impersonation might be applied)
// ============================

// export async function authSession(req: Request, _res: Response, next: Function) {
//   // Your normal session -> user lookup
//   const baseUser = await getUserFromSession(req.session);
//   const impersonateId = (req.session as any).impersonateUserId as string | undefined;
//   req.user = baseUser;
//   if (impersonateId) {
//     const [imp] = await db.select().from(users).where(eq(users.id, impersonateId));
//     if (imp) req.user = { ...imp, impersonatedBy: baseUser?.id } as any;
//   }
//   next();
// }
